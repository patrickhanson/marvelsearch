{"version":3,"sources":["images/Font-Marvel-Logo.jpg","SearchResults.jsx","App.js","ComicBookPage.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchResults","bookList","props","results","map","book","Card","key","id","Content","to","Image","src","images","path","extension","className","Header","title","Group","centered","this","Component","App","state","value","searchResults","handleChange","event","setState","target","getComics","fetch","method","headers","then","response","json","data","length","console","log","alert","submitSearch","submitKeySearch","marvelLogo","alt","width","Input","focus","placeholder","icon","onChange","onKeyPress","Button","onClick","ComicBookPage","imagesrc","series","price","parseUrl","parsedUrl","window","location","href","split","getComic","allBookData","name","prices","Boolean","hostname","match","ReactDOM","render","basename","process","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0a94c66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Font-Marvel-Logo.0392e6da.jpg\";","import React, { Component } from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\n\nclass SearchResults extends Component {\n    bookList = () => {\n        if(this.props.results < 1) {\n            return(null)\n        } else {\n            return this.props.results.map(book => {\n                return(\n                    <Card key={book.id} >\n                        <Card.Content>\n                            <Link to={`/book/${book.id}`} >\n                                <Image \n                                    src={(book.images[0].path) + \".\" + (book.images[0].extension)}\n                                    className=\"bookImage\"\n                                />\n                            </Link>\n                            <Link to={`/book/${book.id}`}>\n                                <Card.Header className=\"cardHeader\" >{book.title}</Card.Header>\n                            </Link>\n                        </Card.Content>\n                    </Card>\n                )\n            })\n        }\n    }\n    \n    render() {\n        return(\n            <Card.Group centered className=\"searchResults\" >\n                {this.bookList(this.props.results)}\n            </Card.Group>\n        )\n    }\n}\n\nexport default SearchResults;","import React, { Component } from 'react';\nimport './App.css';\nimport marvelLogo from './images/Font-Marvel-Logo.jpg'\nimport SearchResults from './SearchResults'\nimport { Button, Input } from 'semantic-ui-react';\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    searchResults: []\n  }\n  \n  handleChange = (event) => {\n    this.setState({ value: event.target.value })\n  }\n\n  getComics = () => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n\n    const apikey = \"53edf8013ffc768094d59e068d968211\"\n    const ts = \"1\"\n    const hash = \"7e9a6f0439c442930f6bcf44fdd8dd49\"\n    \n    fetch(`http://gateway.marvel.com/v1/public/comics?apikey=${apikey}&ts=${ts}&hash=${hash}&title=${this.state.value}`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        if(data.data.results.length > 0) {\n          this.setState({ searchResults: data.data.results })\n          console.log(this.state.searchResults)\n          this.setState({ value: \"\" })\n        } else {\n          alert(\"No matches! Check your spelling and try again.\")\n        }\n      })\n  }\n\n  submitSearch = () => {\n    this.getComics()\n  }\n\n  submitKeySearch = (event) => {\n    if (event.key === \"Enter\") {\n      this.getComics()\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"pageHeader\">\n          <img src={marvelLogo} alt='Marvel Logo' width='200px' />\n          <h1 className=\"title\">Search</h1>\n        </header>\n        <div className=\"body\" >\n          <Input \n            focus placeholder=\"Search for Comic Book\"\n            className=\"searchInput\"\n            icon=\"search\"\n            value={this.state.value}\n            onChange={this.handleChange}\n            onKeyPress={this.submitKeySearch}\n          />\n          <Button \n            className='ui button' \n            onClick={this.submitSearch}\n          >\n            Search\n          </Button>\n          <div className=\"main\" >\n            <h2>Results</h2>\n            <SearchResults results={this.state.searchResults} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Button, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom'\nimport './comicpage.css'\n\n\nclass ComicBookPage extends Component {\n    state = {\n        book: {},\n        title: \"\",\n        imagesrc: \"\",\n        series: \"\",\n        price: \"\"\n    }\n    \n    parseUrl = () => {\n        const url = window.location.href\n        const parsedUrl = url.split(\"/\")\n        const bookId = parsedUrl[parsedUrl.length-1]\n        return bookId\n    }\n    \n    getComic = (id) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n        }\n      \n        const apikey = \"53edf8013ffc768094d59e068d968211\"\n        const ts = \"1\"\n        const hash = \"7e9a6f0439c442930f6bcf44fdd8dd49\"\n        console.log(id)\n        fetch(`http://gateway.marvel.com/v1/public/comics/${id}?apikey=${apikey}&ts=${ts}&hash=${hash}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ \n                    allBookData: data.data.results[0],\n                    title: data.data.results[0].title,\n                    imagesrc: (data.data.results[0].images[0].path) + \".\" + (data.data.results[0].images[0].extension),\n                    series: data.data.results[0].series.name,\n                    price: data.data.results[0].prices[0].price\n                })\n                console.log(this.state.book)\n            })\n    }\n    \n    componentDidMount() {\n        this.getComic(this.parseUrl())\n    }\n\n    render() {\n        return(\n            <div className='comicPage'>\n                <div className=\"container\" >\n                    <Image src={this.state.imagesrc} className=\"comicImage\" />\n                    <div className=\"info\">\n                        <div>\n                            <h2>Title</h2>\n                            {this.state.title}\n                        </div>\n                        <div>\n                            <h2>Series</h2>\n                            {this.state.series}\n                        </div>\n                        <div>\n                            <h2>Price</h2>\n                            {this.state.price}\n                        </div>\n                    </div>\n                </div>\n                <Link to='/'>\n                    <Button>Back to Home Page</Button>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default ComicBookPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ComicBookPage from './ComicBookPage';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL} >\n        <Switch>\n            <Route exact path=\"/\" >\n                <App />\n            </Route>\n            <Route exact path=\"/book/:id\" >\n                <ComicBookPage />\n            </Route>\n        </Switch>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}